name: E2E Tests (Docker)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install required dependencies
        run: |
          echo "Installing required dependencies..."
          sudo apt-get update -qq

          # Add Docker's official GPG key and repository
          sudo apt-get install -y ca-certificates curl gnupg
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg

          # Add Docker repository
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update -qq

          # Install Docker Compose plugin and other dependencies
          sudo apt-get install -y docker-compose-plugin curl jq redis-tools python3-pip netcat-openbsd

          # Install Python packages
          pip3 install PyYAML

          # Verify Docker Compose installation
          if docker compose version > /dev/null 2>&1; then
            echo "✅ Docker Compose plugin installed successfully"
            docker compose version
          elif docker-compose version > /dev/null 2>&1; then
            echo "✅ Docker Compose standalone installed successfully"
            docker-compose version
          else
            echo "❌ Docker Compose installation failed"
            exit 1
          fi

          # Verify other tools
          curl --version | head -1
          jq --version
          redis-cli --version
          nc -h | head -1
          python3 --version
          python3 -c "import yaml; print('PyYAML version:', yaml.__version__)"
          echo "✅ All dependencies installed successfully"

      - name: Build sidecar image locally
        run: |
          echo "Building sidecar image locally..."
          docker build -t gunicorn-prometheus-exporter:test .
          echo "✅ Sidecar image built successfully"

      - name: Build sample app image locally
        run: |
          echo "Building sample app image locally..."
          docker build -f docker/Dockerfile.app -t gunicorn-app:test .
          echo "✅ Sample app image built successfully"

      - name: Test standalone images
        run: |
          bash e2e/docker/test_standalone_images.sh

      - name: Test Docker Compose
        run: |
          bash e2e/docker/test_docker_compose.sh

      - name: Test sidecar functionality
        run: |
          echo "Testing sidecar functionality..."

          # Create a temporary directory for multiprocess files with proper permissions
          mkdir -p /tmp/test_prometheus_multiproc
          chmod 777 /tmp/test_prometheus_multiproc

          # Start sidecar in background (disable Redis for isolated testing)
          docker run -d \
            --name test-sidecar \
            -p 9091:9091 \
            -e REDIS_ENABLED=false \
            -v /tmp/test_prometheus_multiproc:/tmp/prometheus_multiproc \
            gunicorn-prometheus-exporter:test

          # Wait for sidecar to start
          sleep 10

          # Test metrics endpoint (should respond even with no metrics)
          if curl -f http://localhost:9091/metrics; then
            echo "✅ Sidecar metrics endpoint responding"
          else
            echo "❌ Sidecar metrics endpoint not responding"
            docker logs test-sidecar
            exit 1
          fi

          # Cleanup
          docker stop test-sidecar
          docker rm test-sidecar
          rm -rf /tmp/test_prometheus_multiproc

          echo "✅ Sidecar functionality test passed!"

      - name: Test with Redis
        run: |
          bash e2e/docker/test_sidecar_redis.sh

      - name: Test Kubernetes manifests
        run: |
          echo "Testing Kubernetes manifests..."

          # Install YAML parser
          pip3 install --no-cache-dir PyYAML >/dev/null

          # Validate YAML files
          for file in k8s/*.yaml; do
            echo "Validating $file..."
            # Basic YAML syntax check
            python3 -c "import yaml; yaml.safe_load(open('$file'))" || exit 1
          done

          echo "✅ Kubernetes manifests validation passed!"

      - name: Test entrypoint modes
        run: |
          echo "Testing entrypoint modes..."

          # Test sidecar mode help
          echo "Testing sidecar mode..."
          docker run --rm gunicorn-prometheus-exporter:test sidecar --help 2>&1 | head -5 || exit 1
          echo "✅ Sidecar mode works"

          # Test standalone mode help
          echo "Testing standalone mode..."
          docker run --rm gunicorn-prometheus-exporter:test standalone --help 2>&1 | head -5 || exit 1
          echo "✅ Standalone mode works"

          # Test health mode help
          echo "Testing health mode..."
          docker run --rm gunicorn-prometheus-exporter:test health --help 2>&1 | head -5 || exit 1
          echo "✅ Health mode works"

          # Test help mode
          echo "Testing help mode..."
          docker run --rm gunicorn-prometheus-exporter:test help 2>&1 | head -5 || exit 1
          echo "✅ Help mode works"

          echo "✅ All entrypoint modes test passed!"

      - name: Summary
        run: |
          echo "🎉 All Docker E2E tests passed!"
          echo "✅ Sidecar image builds successfully"
          echo "✅ Sample app image builds successfully"
          echo "✅ Standalone images work correctly"
          echo "✅ Docker Compose setup works"
          echo "✅ Sidecar functionality works"
          echo "✅ Redis integration works"
          echo "✅ Kubernetes manifests are valid"
          echo "✅ Entrypoint modes work correctly"
